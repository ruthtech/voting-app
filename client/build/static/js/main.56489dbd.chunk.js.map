{"version":3,"sources":["components/assets/media/canada-flag.svg","utils/UserContext.js","components/Login.js","components/EditDistrictConfirm.js","components/EditDistrict.js","components/LoadingSpinner.js","components/CandidateDetails.js","components/ViewCandidates.js","components/VoteRow.js","components/VoteSubmitted.js","components/VoteConfirm.js","components/Vote.js","components/Landing.js","components/tooltip.js","components/Simulation.js","App.js","index.js"],"names":["module","exports","React","createContext","Login","props","useState","username","setUsername","password","setPassword","UserContext","Consumer","handleLogin","className","Image","src","CanadaFlag","alt","Form","Group","id","Label","Control","type","defaultValue","onChange","event","target","value","Button","variant","onClick","a","async","preventDefault","encodeURI","name","isAdmin","axios","method","url","data","user","isVerified","log","error","handleFormSubmit","EditDistrictConfirm","activeComponentId","setActiveComponentId","renderDefault","debug","location","street","number","city","state","postcode","streetNo","streetName","province","replace","newUser","renderActiveComponent","EditDistrict","context","newLocation","setState","renderBack","console","renderConfirm","voter","coordinates","latitude","longitude","login","DropdownButton","title","Dropdown","Item","controlId","disabled","checkInvalidInput","JSON","parse","stringify","this","trim","Component","contextType","LoadingSpinner","Candidate","getPartyWebsite","party_affiliation","candidate","first_name","last_name","district_name","href","renderCandidateDetails","ViewCandidates","candidates","setCandidates","setVoter","selectedCandidate","setSelectedCandidate","useEffect","query","get","candidateList","loadCandidates","loadPartyColour","renderCandidateThumbnail","key","Card","Title","decodeURI","Text","CandidateDetails","handleSelectCandidate","map","VoteRow","model","index","InputGroup","plaintext","readOnly","Append","Radio","aria-label","handleFormSelect","VoteSubmitted","Body","VoteConfirm","_id","voterId","then","response","hasvoted","catch","Vote","district","mapboxgl","accessToken","process","Landing","ref","el","mapContainer","renderEditDistrict","renderViewCandidates","renderVote","voterLatitude","voterLongitude","newMap","Map","container","style","center","zoom","districtLayerId","on","undefined","getLayer","addLayer","districtBoundaries","updateMap","isSourceLoaded","setCenter","districtChanged","newDistrict","Tooltip","features","length","feature","layer","metadata","votingDistrict","votingSeat","grey","Simulation","isLoading","renderSimulation","districts","i","getDistrictLayerId","partyColour","getPartyColour","seat","setPaintProperty","resetSimulation","ReactDOM","unmountComponentAtNode","document","getElementById","tooltipReference","render","tooltipContainer","createElement","setAttribute","tooltip","Marker","offset","setLngLat","addTo","e","queryRenderedFeatures","point","lngLat","votingFeature","filter","getCanvas","cursor","setTooltip","remove","destroy","partyName","trace","fillColor","loadingClass","setLevel","remote","apply","format","msg","message","level","stacktrace","App","setUser","component","Provider","userSubset","info"],"mappings":"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","file":"static/js/main.56489dbd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/canada-flag.dea429e4.svg\";","import React from 'react';\r\n\r\nexport default React.createContext();\r\n","// import React from 'react';\r\nimport React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Form from 'react-bootstrap/Form';\r\nimport axios from 'axios';\r\nimport UserContext from '../utils/UserContext';\r\nimport CanadaFlag from './assets/media/canada-flag.svg';\r\nimport \"./assets/css/style.css\";\r\n\r\nfunction Login(props) {\r\n  const [username, setUsername] = useState();\r\n  const [password, setPassword] = useState();\r\n\r\n  const handleFormSubmit = async (username, password, handleLogin, event) => {\r\n    try {\r\n      event.preventDefault();\r\n\r\n      username = encodeURI(username);\r\n      if(username==='admin') {\r\n        // Temporary. How do we want to support the adminstrator running the simulation for the user to see?\r\n        handleLogin({ name: \"admin\", isAdmin: true });\r\n        return;\r\n      }\r\n\r\n      const query = `/api/v1/login`;\r\n      const user = await axios({\r\n        method: 'post',\r\n        url: query,\r\n        data: {\r\n          username: username,\r\n          password: password\r\n        }\r\n      });\r\n\r\n      if(!user.data.isVerified) {\r\n        // Either the UUID was not found or the password is incorrect.\r\n        // The page will continue to show this Login page until a user is found & verified.\r\n        props.log.error(`No user found with username ${username} and that password.`);\r\n        handleLogin(null);\r\n        return;\r\n      }\r\n\r\n      // Success\r\n      handleLogin(user.data.isVerified);\r\n    } catch ( err ) {\r\n      props.log.error(`Error while retrieving username ${username} and that password.`);\r\n      props.log.error(err);\r\n\r\n      // null means that no user is logged in.\r\n      handleLogin(null);\r\n    }\r\n  };\r\n\r\n    return (\r\n      <UserContext.Consumer>\r\n      {\r\n        ({handleLogin}) =>\r\n        <div className=\"container-fluid bg-almostWhite full-screen\">\r\n            <div className=\"row flag-block \">\r\n              <Image className=\"bg-white\" src={CanadaFlag} alt=\"Canada Flag\" />\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col heading\">\r\n                    <h1>Canada Votes Online</h1>\r\n                </div>\r\n            </div>\r\n            <div className=\"row bottom-page\">\r\n                <div className=\"col\">\r\n                  <Form>\r\n                    <Form.Group id=\"formBasicUUID\">\r\n                      <Form.Label className=\"entry-field-label\">Username</Form.Label>\r\n                      <Form.Control type=\"text\" defaultValue={username} onChange={event => setUsername(event.target.value)}/>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group id=\"formBasicPassword\">\r\n                      <Form.Label className=\"entry-field-label\">Password</Form.Label>\r\n                      <Form.Control type=\"password\" defaultValue={password} onChange={event => setPassword(event.target.value)}/>\r\n                    </Form.Group>\r\n\r\n                    <div className=\"right-align-div\">\r\n                      <Button variant=\"secondary\" type=\"submit\" onClick={(event) => {handleFormSubmit(username, password, handleLogin, event)}}>\r\n                        Sign in\r\n                      </Button>\r\n                    </div>\r\n                  </Form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n      }\r\n      </UserContext.Consumer>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport axios from 'axios';\r\nimport \"./assets/css/style.css\";\r\nimport Landing from './Landing';\r\nimport EditDistrict from './EditDistrict';\r\nimport UserContext from '../utils/UserContext';\r\n\r\nfunction EditDistrictConfirm(props) {\r\n  const [activeComponentId, setActiveComponentId] = useState(0); // 0 is render default (this confirmation page) and 1 is go back and edit (edit district), 2 is for landing\r\n\r\n    const handleFormSubmit = async (handleLogin) => {\r\n      try {\r\n        const username = encodeURI(props.username);\r\n        const streetNo = encodeURI(props.location.street.number);\r\n        const streetName = encodeURI(props.location.street.name);\r\n        const city = encodeURI(props.location.city);\r\n        const province = encodeURI(props.location.state);\r\n        const postcode = encodeURI(props.location.postcode.replace(/\\s/g, \"\"));\r\n        let newUser = await axios({\r\n          method: 'put',\r\n          url: '/api/v1/voters/' + username,\r\n          data: {\r\n            streetNo: streetNo,\r\n            streetName: streetName,\r\n            city: city,\r\n            province: province,\r\n            postcode: postcode\r\n          }\r\n        });\r\n    \r\n        props.log.debug(\"EditDistrictConfirm, newUser.data \", newUser.data);\r\n        handleLogin(newUser.data); // Update the user in the context.\r\n        props.log.debug(\"EditDistrictConfirm after handleLogin\"); \r\n      } catch ( err ) {\r\n        props.log.error(err);\r\n      }\r\n    };\r\n\r\n    // active component id 1\r\n    const renderEditDistrict = () => {\r\n      return <EditDistrict location={props.location}/>;\r\n    };\r\n\r\n    // active component id 2\r\n    const renderHome = () => {\r\n      return <Landing />;\r\n    };\r\n\r\n    // active component id 0\r\n    const renderDefault = (handleLogin) => {\r\n      props.log.debug(\"EditDistrictConfirm render default location is \", props.location);\r\n      return (\r\n        <div className=\"container-fluid bg-almostWhite full-screen\">\r\n        <div className=\"row pt-3\">\r\n          <div className=\"col\">\r\n            <h4>Is this correct?</h4>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <h6>If there were any problems locating the address that you entered, the closest address is displayed below.</h6>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col bg-white centre-align-div\">\r\n            <p>{props.location.street.number} {props.location.street.name}, {props.location.city}, {props.location.state}, {props.location.postcode}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <Button variant=\"secondary w-100\" type=\"button\" \r\n              onClick={ () => { setActiveComponentId(1)}}>\r\n              Edit\r\n            </Button>\r\n          </div>\r\n          <div className=\"col\">\r\n            <Button variant=\"secondary w-100\" type=\"submit\" \r\n                onClick={\r\n                () => {\r\n                  handleFormSubmit(handleLogin);\r\n                  setActiveComponentId(2);\r\n                }}>\r\n              Confirm\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      );\r\n    };\r\n\r\n    const renderActiveComponent = (handleLogin) => {\r\n      switch(activeComponentId) {\r\n        case(1): {\r\n          return renderEditDistrict();\r\n        }\r\n\r\n        case(2): {\r\n          return renderHome();\r\n        }\r\n\r\n        case(0):\r\n        default: {\r\n          return renderDefault(handleLogin);\r\n        }\r\n      }\r\n    };\r\n\r\n    return (\r\n      <UserContext.Consumer >\r\n       {\r\n         ({handleLogin}) => {\r\n           return renderActiveComponent(handleLogin)\r\n         }\r\n      }\r\n       </UserContext.Consumer>\r\n      );\r\n}\r\n\r\nexport default EditDistrictConfirm;\r\n","import React, { Component } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Button from 'react-bootstrap/Button';\r\nimport axios from 'axios';\r\nimport UserContext from '../utils/UserContext';\r\nimport EditDistrictConfirm from './EditDistrictConfirm';\r\nimport Landing from './Landing';\r\nimport \"./assets/css/style.css\";\r\nimport log from 'loglevel';\r\n\r\nclass EditDistrict extends Component {\r\n  // Location data is not escaped until right before it is sent to axios. \r\n  // Sending in location instead of user/voter because the query to the server to find out if the address exists isn't associated with a user. \r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      location: JSON.parse(JSON.stringify(props.location)), // Create a deep copy of the location instead of modifying the location directly. This way if the user cancels before saving the original address is preserved.\r\n      activeComponentId: 0 // 0 means render default form, 1 means EditDistrictConfirm\r\n    }\r\n  \r\n  }\r\n\r\n  handleFormSubmit = async (event) => {\r\n    try {\r\n      event.preventDefault();\r\n      const log = this.context.log;\r\n      // Check if the address is valid or not. If it's not, replace it with the nearest valid address.\r\n      // escape is deprecated and doesn't work on the Quebec city names with accents. Use encodeURI instead.\r\n\r\n      const streetNo = encodeURI(this.state.location.street.number);\r\n      const streetName = encodeURI(this.state.location.street.name);\r\n      const city = encodeURI(this.state.location.city);\r\n      const province = encodeURI(this.state.location.state);\r\n      const postcode = encodeURI(this.state.location.postcode.replace(/\\s/g, \"\"));\r\n\r\n\r\n      log.debug(`EditDistrict about to call /api/v1/verifyAddress/${streetNo}/${streetName}/${city}/${province}/${postcode}`);\r\n      let newLocation = await axios({\r\n        method: 'post',\r\n        url: '/api/v1/verifyAddress',\r\n        data: {\r\n          streetNo: streetNo,\r\n          streetName: streetName,\r\n          city: city,\r\n          province: province,\r\n          postcode: postcode\r\n        }\r\n      });\r\n      log.debug(\"EditDistrict, newLocation is \", newLocation.data);\r\n      this.setState({ location: newLocation.data });\r\n      log.debug(\"EditDistrict, after new location state is \", this.state.location);\r\n      this.setState({ activeComponentId: 1 });; // switch to the Edit District Confirm page\r\n    } catch( err ) {\r\n      log.error(err);\r\n    }\r\n  }\r\n\r\n  checkInvalidInput() {\r\n    // Check that the user isn't making the address blank or something that cannot be sent to the server\r\n    if(this.state.location.street.number === \"\") return true;\r\n    if(this.state.location.street.name.trim() === \"\") return true;\r\n    if(this.state.location.city.trim() === \"\") return true;\r\n    if(this.state.location.postcode.trim() === \"\") return true;\r\n    if(this.state.location.state.trim() === \"\") return true;\r\n\r\n    return false;\r\n  }\r\n\r\n  // active component id 2\r\n  renderBack = () => {\r\n    console.log(\"location is \", this.state.location);\r\n    console.log(\"props location is \", this.props.location);\r\n    return <Landing />;\r\n  };\r\n\r\n  // active component id 1\r\n  renderConfirm = () => {\r\n    const voter = this.context.user;\r\n    const log = this.context.log;\r\n    log.debug(\"EditDistrict about to confirm, latitude is \" + this.state.location.coordinates.latitude + \" and longitude are \" + this.state.location.coordinates.longitude);\r\n    return <EditDistrictConfirm location={this.state.location} username={voter.login.username} log={log}/>\r\n  };\r\n\r\n  // active component id 0\r\n  renderDefault = () => {\r\n    return (\r\n      <div className=\"container-fluid bg-almostWhite full-screen\">\r\n          <div className=\"row\">\r\n              <div className=\"col\">\r\n                  <h1>Enter your new address</h1>\r\n              </div>\r\n          </div>\r\n          <div className=\"row pb-3\">\r\n            <div className=\"col \">\r\n              <Form>\r\n                  <Form.Group id=\"formBasicAddress\">\r\n                    <Form.Label id=\"streetNoLabel\" className=\"entry-field-label\">Street Number</Form.Label>\r\n                    <Form.Control id=\"streetNo\" type=\"number\" value={this.state.location.street.number} onChange={\r\n                      event => {\r\n                        let newLocation = {...this.state.location};\r\n                        newLocation.street.number = event.target.value;\r\n                        this.setState({ location: newLocation});\r\n                      }} />\r\n                    <Form.Label className=\"entry-field-label\">Address</Form.Label>\r\n                    <Form.Control type=\"text\" value={this.state.location.street.name} onChange={\r\n                      event => {\r\n                        let newLocation = {...this.state.location};\r\n                        newLocation.street.name = event.target.value;\r\n                        this.setState({ location: newLocation});\r\n                      }} />\r\n                  </Form.Group>\r\n\r\n                  <Form.Group id=\"formBasicCity\">\r\n                    <Form.Label className=\"entry-field-label\">City</Form.Label>\r\n                    <Form.Control type=\"text\" value={this.state.location.city} onChange={event => this.setState({ location: {...this.state.location, city:event.target.value}})}/>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group id=\"formBasicPostalcode\">\r\n                    <Form.Label className=\"entry-field-label\">Postal Code</Form.Label>\r\n                    <Form.Control type=\"text\" value={this.state.location.postcode} onChange={event => this.setState({ location: {...this.state.location, postcode:event.target.value}})}/>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group value={this.state.location.state} className=\"right-align-div\">\r\n                    <DropdownButton id=\"provinceDropdown\" title=\"Province/Territory\" variant=\"secondary\">\r\n                      <Dropdown.Item id=\"Alberta\" onClick={() => {this.setState({ location: {...this.state.location, state:'Alberta'}})}}>Alberta</Dropdown.Item>\r\n                      <Dropdown.Item id=\"BritishColumbia\" onClick={() => this.setState({ location: {...this.state.location, state:'British Columbia'}})}>British Columbia</Dropdown.Item>\r\n                      <Dropdown.Item id=\"Manitoba\" onClick={() => this.setState({ location: {...this.state.location, state:'Manitoba'}})}>Manitoba</Dropdown.Item>\r\n                      <Dropdown.Item id=\"NewBrunswick\" onClick={() => this.setState({ location: {...this.state.location, state:'New Brunswick'}})}>New Brunswick</Dropdown.Item>\r\n                      <Dropdown.Item id=\"NewfoundlandandLabrador\" onClick={() => this.setState({ location: {...this.state.location, state:'Newfoundland and Labrador'}})}>Newfoundland and Labrador</Dropdown.Item>\r\n                      <Dropdown.Item id=\"NorthwestTerritories\" onClick={() => this.setState({ location: {...this.state.location, state:'Northwest Territories'}})}>Northwest Territories</Dropdown.Item>\r\n                      <Dropdown.Item id=\"NovaScotia\" onClick={() => this.setState({ location: {...this.state.location, state:'Nova Scotia'}})}>Nova Scotia</Dropdown.Item>\r\n                      <Dropdown.Item id=\"Nunavut\" onClick={() => this.setState({ location: {...this.state.location, state:'Nunavut'}})}>Nunavut</Dropdown.Item>\r\n                      <Dropdown.Item id=\"Ontario\" onClick={() => this.setState({ location: {...this.state.location, state:'Ontario'}})}>Ontario</Dropdown.Item>\r\n                      <Dropdown.Item id=\"PrinceEdwardIsland\" onClick={() => this.setState({ location: {...this.state.location, state:'Prince Edward Island'}})}>Prince Edward Island</Dropdown.Item>\r\n                      <Dropdown.Item id=\"Quebec\" onClick={() => this.setState({ location: {...this.state.location, state:'Quebec'}})}>Quebec</Dropdown.Item>\r\n                      <Dropdown.Item id=\"Saskatchewan\" onClick={() => this.setState({ location: {...this.state.location, state:'Saskatchewan'}})}>Saskatchewan</Dropdown.Item>\r\n                      <Dropdown.Item id=\"Yukon\" onClick={() => this.setState({ location: {...this.state.location, state:'Yukon'}})}>Yukon</Dropdown.Item>\r\n                    </DropdownButton>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group controlId=\"formSubmit\" className=\"centre-align-div\">\r\n                    <Button variant=\"secondary w-50 mr-3\" type=\"button\" \r\n                      onClick={ () => { this.setState({ activeComponentId: 2 }); } }>\r\n                      Home\r\n                    </Button>\r\n                    <Button variant=\"secondary w-50 ml-3\" type=\"submit\" \r\n                      onClick={(event) => {\r\n                        this.handleFormSubmit(event); // Check that the address exists and send it, or the closest matching existing address, to the confirmation page.\r\n                      }} disabled={this.checkInvalidInput()}>\r\n                      Next\r\n                    </Button>\r\n                  </Form.Group>\r\n                </Form>\r\n            </div>\r\n          </div>\r\n      </div>\r\n    )\r\n  };\r\n\r\n  renderActiveComponent = () => {\r\n    switch(this.state.activeComponentId) {\r\n      case(2): {\r\n        return this.renderBack();\r\n      }\r\n\r\n      case(1): {\r\n        return this.renderConfirm();\r\n      }\r\n\r\n      case(0):\r\n      default: {\r\n        return this.renderDefault();\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return this.renderActiveComponent();\r\n  }\r\n}\r\nEditDistrict.contextType = UserContext;\r\n\r\nexport default EditDistrict;\r\n","import React from 'react';\r\n\r\nfunction LoadingSpinner() {\r\n\r\n    return (\r\n        <div>\r\n            <i className=\"fa fa-spinner fa-spin\" /> Loading...\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoadingSpinner;\r\n\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n// import Image from 'react-bootstrap/Image';\r\n// import Card from 'react-bootstrap/Card';\r\nimport Landing from './Landing';\r\nimport ViewCandidates from './ViewCandidates';\r\nimport \"./assets/css/style.css\";\r\n\r\nfunction Candidate(props) {\r\n    const [activeComponentId, setActiveComponentId] = useState(0); // 0 is for candidate details, 1 is for list of candidates, 2 is for Landing\r\n\r\n    const getPartyWebsite = (party_affiliation) => {\r\n        switch(party_affiliation) {\r\n            case('Conservative Party of Canada'): {\r\n                return \"http://www.conservative.ca\";\r\n            }\r\n\r\n            case('Green Party of Canada'): {\r\n                return \"http://greenparty.ca\";\r\n            }\r\n\r\n            case('Liberal Party of Canada'): {\r\n                return \"http://www.liberal.ca\";\r\n            }\r\n\r\n            case(\"New Democratic Party\"): {\r\n                return \"http://www.ndp.ca\";\r\n            }\r\n\r\n            case(\"Bloc Québécois\"): {\r\n                return \"http://blocquebecois.org\";\r\n            }\r\n\r\n            default: {\r\n                return \"https://www.elections.ca/content.aspx?section=pol&dir=par&document=index&lang=e\"; // indicate no party website by directing them to the general Elections Canada web site listing all of them\r\n            }\r\n        }\r\n    }\r\n\r\n    // Active component Id 0\r\n    const renderCandidateDetails = () => {\r\n        const candidate = props.candidate;\r\n        return (\r\n            <div className=\"container-fluid full-screen bg-almostWhite\">\r\n                <div className=\"row\">\r\n                    {/* <div className=\"col text-center\">\r\n                        <Image src={candidate.pictureURL} />\r\n                    </div> */}\r\n                    <div className=\"col\">\r\n                        <h1>{candidate.first_name} {candidate.last_name}</h1>\r\n                        <h5>{candidate.party_affiliation}</h5>\r\n                        <h5>{candidate.district_name}</h5>\r\n                    </div>\r\n                </div>\r\n                {/* <div className=\"row\">\r\n                  <div className=\"col\">\r\n                    <Card className={candidate.party}>\r\n                      <Card.Body>\r\n                        <Card.Title>Contact</Card.Title>\r\n                        <Card.Text><b>Phone:</b> {candidate.phone}</Card.Text>\r\n                        <Card.Text><b>Office Address:</b> {candidate.address}</Card.Text>\r\n                        <Card.Text><b>Email:</b> {candidate.email}</Card.Text>\r\n                        <Card.Text><b>Twitter:</b> <Card.Link href={candidate.twitter}>{candidate.twitter}</Card.Link></Card.Text>\r\n                        <Card.Text><b>Website:</b> <Card.Link href={candidate.website}>{candidate.website}</Card.Link></Card.Text>                      \r\n                      </Card.Body>\r\n                    </Card>\r\n                  </div>\r\n                </div> */}\r\n                <div className=\"row\">\r\n                    <div className=\"col centre-align-div\">\r\n                        <h4><a href={getPartyWebsite(candidate.party_affiliation)}>{candidate.party_affiliation}</a></h4>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col centre-align-div\">\r\n                        <h4><a href=\"https://www.elections.ca/content.aspx?section=pol&dir=par&document=index&lang=e\">Elections Canada Registered Political Parties</a></h4>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row p-3\">\r\n                    <div className=\"col\">\r\n                        <Button variant=\"secondary w-100\" onClick={ () => { setActiveComponentId(1) }}>View Candidates</Button>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <Button variant=\"secondary w-100\" onClick={ () => { setActiveComponentId(2) }}>Home</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Active component id 1\r\n    const renderAllCandidates = () => {\r\n        return <ViewCandidates log={props.log}/>;\r\n    }\r\n\r\n    // Active component id 2\r\n    const renderHome = () => {\r\n        return (\r\n          <Landing />\r\n        );\r\n    }    \r\n\r\n    const renderActiveComponent = () => {\r\n        switch (activeComponentId) {\r\n            case(2): {\r\n              return renderHome();\r\n            }\r\n      \r\n            case(1): {\r\n              return renderAllCandidates();\r\n            }\r\n      \r\n            case(0): \r\n            default: {\r\n              return renderCandidateDetails();\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        renderActiveComponent()\r\n    );\r\n}\r\n\r\nexport default Candidate;\r\n","import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport Button from 'react-bootstrap/Button';\r\nimport UserContext from '../utils/UserContext';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport Landing from './Landing';\r\nimport CandidateDetails from './CandidateDetails';\r\nimport Card from 'react-bootstrap/Card';\r\nimport \"./assets/css/style.css\";\r\n\r\nfunction ViewCandidates(props) {\r\n    const [candidates, setCandidates] = useState([]);\r\n    const [voter, setVoter] = useState(null);\r\n    const [selectedCandidate, setSelectedCandidate] = useState(null); \r\n    const [activeComponentId, setActiveComponentId] = useState(0); // 0 for Loading, 1 for Landing, 2 for list of candidates\r\n\r\n    useEffect(() => {\r\n      async function loadCandidates() {\r\n        try {\r\n          if(voter === null) {\r\n            // Not ready to load candidates until we know what district the user is in\r\n            return;\r\n          }\r\n  \r\n          if(activeComponentId === 0) {\r\n            let postcode = voter.location.postcode.replace(/\\s/g, \"\");\r\n            const query = `/api/v1/candidates/${postcode}`;\r\n            props.log.debug(query);\r\n            const candidates = await axios.get(query);\r\n            props.log.debug(\"View Candidates found \", candidates);\r\n            setCandidates(candidates.data.candidateList);\r\n            setActiveComponentId(2);\r\n          }\r\n        }\r\n        catch( err ) {\r\n          props.log.error(err);\r\n          setCandidates([]);\r\n        }\r\n      }\r\n      loadCandidates();\r\n    }, [voter]);\r\n\r\n    const loadPartyColour = (candidate) => {\r\n      switch(candidate.party_affiliation) {\r\n        case('New Democratic Party'): {\r\n          return 'ndp'; // the name of the class in the style.css file\r\n        }\r\n\r\n        case('Green Party of Canada'): {\r\n          return 'green';\r\n        }\r\n\r\n        case('Conservative Party of Canada'): {\r\n          return 'pc';\r\n        }\r\n\r\n        case('Liberal Party of Canada'): {\r\n          return 'liberal';\r\n        }\r\n\r\n        case('Bloc Qu�b�cois'): {\r\n          return 'bloc';\r\n        }\r\n\r\n        default: {\r\n          return 'other';\r\n        }\r\n      }\r\n    }\r\n\r\n    const renderDefault = () => {\r\n      return (\r\n        <div className=\"container-fluid bg-almostWhite\">\r\n          <div className=\"row \">\r\n            {\r\n             candidates.map( (candidate) => {\r\n              props.log.debug(candidate)\r\n               return renderCandidateThumbnail(candidate);\r\n             })\r\n            }\r\n          </div>\r\n          <div className=\"row mt-3 pb-3\">\r\n            <div className=\"col text-right\">\r\n                <Button variant=\"secondary\" onClick={ () => { setActiveComponentId(1) } }>\r\n                Home\r\n                </Button>\r\n            </div>\r\n          </div>\r\n      </div>\r\n      );\r\n    }\r\n\r\n    const renderHome = () => {\r\n      return (\r\n        <Landing />\r\n      );\r\n    }\r\n  \r\n    const renderCandidateDetails = (candidate) => {\r\n      return <CandidateDetails candidate={candidate} handleSelectCandidate={setSelectedCandidate} log={props.log}/>\r\n    };\r\n  \r\n    const renderCandidateThumbnail = (candidate) => {\r\n      return (\r\n        <div key={candidate.id} className=\"col-12 mt-3\">\r\n        <Card className={loadPartyColour(candidate)}>         \r\n          {/* <Card.Img variant=\"top\" src={candidate.pictureURL}   /> */}\r\n          <Card.Title>{decodeURI(candidate.first_name)} {decodeURI(candidate.last_name)}</Card.Title>\r\n          <Card.Text>\r\n          {decodeURI(candidate.party_affiliation)}\r\n          </Card.Text>\r\n          <button className=\"btn btn-secondary\" \r\n            onClick={(event) => {\r\n              setSelectedCandidate(candidate);\r\n              setActiveComponentId(3);\r\n            }}>\r\n            View {candidate.first_name} {candidate.last_name}</button>\r\n        </Card>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const renderActiveComponent = () => {\r\n      switch(activeComponentId) {\r\n        case(0): {\r\n          return <LoadingSpinner />;\r\n        }\r\n\r\n        case(1): {\r\n          return renderHome();\r\n        }\r\n\r\n        case(3): {\r\n          return renderCandidateDetails(selectedCandidate);\r\n        }\r\n\r\n        case(4): {\r\n          return candidates.map( (candidate) => {\r\n            return renderCandidateThumbnail(candidate);\r\n          });\r\n        }\r\n\r\n        case(2):\r\n        default: {\r\n          return renderDefault();\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <UserContext.Consumer>\r\n       {\r\n         ({user}) => {\r\n           setVoter(user);\r\n\r\n           return renderActiveComponent();\r\n         }\r\n       }\r\n      </UserContext.Consumer>\r\n    );\r\n}\r\n\r\nexport default ViewCandidates;\r\n","import React from 'react';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\n// import FormControl from 'react-bootstrap/FormControl';\r\nimport Form from 'react-bootstrap/Form';\r\nimport \"./assets/css/style.css\";\r\n\r\nfunction VoteRow(props) {\r\n  return props.model.map( (candidate, index) => {\r\n    return (\r\n      <InputGroup key={index} className=\"pb-3\">\r\n        <Form.Control plaintext readOnly className=\"bg-white text-right pr-3\" defaultValue={candidate.last_name + \", \" + candidate.first_name + ' / ' + candidate.party_affiliation} />\r\n        <InputGroup.Append>\r\n          <InputGroup.Radio name=\"votingGroup\" aria-label={candidate.last_name + \", \" + candidate.first_name + ' / ' + candidate.party_affiliation} onChange={() => props.handleFormSelect(candidate)}/>\r\n        </InputGroup.Append>\r\n      </InputGroup>\r\n    );\r\n  });\r\n}\r\n\r\nexport default VoteRow;","import React, {useState} from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport UserContext from '../utils/UserContext';\r\nimport Landing from \"./Landing\";\r\nimport \"./assets/css/style.css\";\r\n\r\nfunction VoteSubmitted(props) {\r\n    const [candidate] = useState(props.candidate);\r\n    const [activeComponentId, setActiveComponentId] = useState(0); // 0 means the confirmation message, 1 means landing page\r\n\r\n    // active id 1\r\n    const renderHome = () => {\r\n        return <Landing />;\r\n    }\r\n\r\n    // active id 0\r\n    const renderDefault = () => {\r\n        return (\r\n            <div className={\"container-fluid bg-almostWhite full-screen\"} >\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <h1>You voted for</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row pb-3 text-center\">\r\n                    <div className=\"col\">\r\n                    <Card>\r\n                        <Card.Body>\r\n                        <Card.Title>{candidate.first_name} {candidate.last_name}</Card.Title>\r\n                        <Card.Text>{candidate.party_affiliation}</Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row pt-3\">\r\n                    <div className=\"col\">\r\n                        <h2>Thank you! Your vote has been registered.</h2>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col right-align-div\">\r\n                        <Button variant=\"secondary w-50\" onClick={() => {setActiveComponentId(1)}}>Home</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const renderActiveComponent = () => {\r\n        switch(activeComponentId) {\r\n            case(1): {\r\n                return renderHome();\r\n            }\r\n\r\n            case(0):\r\n            default: {\r\n                return renderDefault();\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <UserContext.Consumer>\r\n        {  \r\n          ({user}) => {\r\n            return renderActiveComponent();\r\n          }\r\n        }\r\n        </UserContext.Consumer>\r\n    );\r\n}\r\n\r\nexport default VoteSubmitted;\r\n","import React, { useState } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport UserContext from '../utils/UserContext';\r\nimport Vote from \"./Vote\";\r\nimport VoteSubmitted from \"./VoteSubmitted\";\r\nimport axios from \"axios\";\r\nimport \"./assets/css/style.css\";\r\n\r\nfunction VoteConfirm(props) {\r\n    const [activeComponentId, setActiveComponentId] = useState(0); // 0 is for default, 1 is for edit/go back, 2 is for save/confirm\r\n    const [candidate] = useState(props.candidate);\r\n    const [voter] = useState(props.voter);\r\n\r\n    // Active Component Id 0\r\n    const renderDefault = () => {\r\n      return (\r\n        <div className={\"container-fluid bg-almostWhite full-screen\"}>\r\n            <div className=\"row pb-3\">\r\n                <div className=\"col\">\r\n                    <h1>You are voting for</h1>\r\n                </div>\r\n            </div>\r\n            <div className=\"row pb-3 text-center\">\r\n                <div className=\"col\">\r\n                  <Card>\r\n                    <Card.Body>\r\n                      <Card.Title>{candidate.first_name} {candidate.last_name}</Card.Title>\r\n                      <Card.Text>{candidate.party_affiliation}</Card.Text>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </div>\r\n            </div>\r\n            <div className=\"row pt-3\">\r\n                <div className=\"col\">\r\n                    <h1>Is this correct?</h1>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <Button variant=\"secondary w-100\" onClick={() => {setActiveComponentId(1)}}>Edit</Button>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <Button variant=\"secondary w-100\" onClick={() => {setActiveComponentId(2)}}>Confirm</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // active component id 1\r\n    const renderEditVote = () => {\r\n        return <Vote log={props.log} />;\r\n    }\r\n\r\n    // active component id 2\r\n    const renderConfirm = (handleLogin) => {\r\n        // Submit the vote\r\n        const query = `/api/v1/candidates/${candidate._id}`;\r\n        props.log.debug(\"candidate is \", candidate);\r\n        props.log.debug(query);\r\n        axios({\r\n            method: 'put',\r\n            url: query,\r\n            data: {\r\n                voterId: voter._id\r\n            }\r\n        })\r\n        .then(function(response){\r\n            props.log.debug(\"vote submitted and response is \", response);\r\n\r\n            // Now that the vote is updated in the database, since we're not retrieving the voter object\r\n            // that we're working with (i.e., it will still have \"hasvoted\" as null), update the voter\r\n            // object directly to show that this voter has voted. Since Mongoose has this as a String, \r\n            // keep it as a string instead of a boolean.\r\n            voter.hasvoted = 'true';\r\n            handleLogin(voter);\r\n        })\r\n        .catch(function(error) {\r\n            props.log.error(error);\r\n        });\r\n\r\n        return <VoteSubmitted candidate={candidate} log={props.log} />;\r\n    }\r\n\r\n    const renderActiveComponent = (handleLogin) => {\r\n        switch(activeComponentId) {\r\n            case(1): {\r\n                return renderEditVote();\r\n            }\r\n\r\n            case(2): {\r\n                return renderConfirm(handleLogin);\r\n            }\r\n\r\n            case(0):\r\n            default: {\r\n                return renderDefault();\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n      <UserContext.Consumer>\r\n      {\r\n        ({handleLogin}) => renderActiveComponent(handleLogin)\r\n      }\r\n      </UserContext.Consumer>\r\n    );\r\n}\r\n\r\nexport default VoteConfirm;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport VoteRow from './VoteRow';\r\nimport axios from 'axios';\r\nimport UserContext from '../utils/UserContext';\r\nimport VoteConfirm from './VoteConfirm';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport Landing from './Landing';\r\n\r\n// When debugging the React code, set the user data as though they logged in via Login.\r\n// When not debugging, comment out the below import.\r\n// import { ottawaCentreCandidatesList } from '../debugReact'; \r\n\r\nimport \"./assets/css/style.css\";\r\n\r\n\r\nfunction Vote(props) {\r\n  const [candidates, setCandidates] = useState([]);\r\n  const [selectedCandidate, setSelectedCandidate] = useState(null);\r\n  const [activeComponentId, setActiveComponentId] = useState(0); // 0 for the loading spinner, 1 for the page listing all of the voting rows, 2 for vote confirm, and 3 for landing\r\n  const [voter, setVoter] = useState(null);\r\n\r\n  useEffect( () => {\r\n    async function loadCandidates() {\r\n      try {\r\n        if(voter === null) {\r\n          // Not ready to load candidates until we know what district the user is in\r\n          return;\r\n        }\r\n  \r\n        if(activeComponentId === 0) {\r\n          props.log.debug(voter);\r\n          let postcode = voter.location.postcode.replace(/\\s/g, \"\");\r\n          const query = `/api/v1/candidates/${postcode}`;\r\n          props.log.debug(`Vote loadCandidates with ${query}`);\r\n          const candidates = await axios.get(query);\r\n          props.log.debug(\"Vote loadCandidates after \", candidates.data);\r\n          setCandidates(candidates.data.candidateList);\r\n\r\n          // FOR DEBUGGING REACT. Comment out and replace with the line above when in production.\r\n          // setCandidates(ottawaCentreCandidatesList);\r\n          // END DEBUGGING REACT\r\n          setActiveComponentId(2);\r\n        }\r\n      }\r\n      catch( err ) {\r\n          props.log.error(err);\r\n          setCandidates([]);\r\n      }\r\n    };\r\n    loadCandidates();  \r\n  }, [voter]);\r\n\r\n\r\n  const handleFormSelect = async (candidate) => {\r\n    props.log.debug(\"Vote, candidate selected, candidate is \", candidate);\r\n    setSelectedCandidate(candidate);\r\n  };\r\n\r\n  // Active Component Id 0\r\n  const renderLoading = () => {\r\n    return <LoadingSpinner />;\r\n  };\r\n\r\n  // Active Component Id 1\r\n  const renderDefault = () => {\r\n    return  (\r\n      <div className=\"container-fluid bg-almostWhite full-screen\">\r\n        <div className=\"row pt-3\">\r\n          <div className=\"col\">\r\n            <h1>Vote in District {voter.location.district}</h1>\r\n          </div>\r\n        </div>\r\n        <div className=\"row pt-3 pb-3\">\r\n            <div className=\"col\">\r\n                <VoteRow\r\n                  model={candidates}\r\n                  handleFormSelect={handleFormSelect}\r\n                />\r\n            </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <Button variant=\"secondary w-100\" type=\"submit\" onClick={\r\n              () => { setActiveComponentId(3) }} >\r\n              Home\r\n            </Button>\r\n          </div>\r\n          <div className=\"col\">\r\n            <Button variant=\"secondary w-100\" type=\"submit\" onClick={\r\n              () => { setActiveComponentId(1) }} disabled={selectedCandidate===null}>\r\n              Vote\r\n            </Button>\r\n          </div>\r\n        </div>\r\n    </div>\r\n    );\r\n  };\r\n\r\n  // Active Component Id 2\r\n  const renderVoteConfirm = () => {\r\n    return <VoteConfirm candidate={selectedCandidate} log={props.log} voter={voter}/>\r\n  };\r\n\r\n  // Active Component Id 3\r\n  const renderHome = () => {\r\n    return <Landing />;\r\n  };\r\n\r\n  const renderActiveComponent = () => {\r\n    switch(activeComponentId) {\r\n      case(0): {\r\n        return renderLoading();\r\n      }\r\n\r\n      case(1): {\r\n        return renderVoteConfirm();\r\n      }\r\n\r\n      case(3): {\r\n        return renderHome();\r\n      }\r\n\r\n      case(2):\r\n      default: {\r\n        return renderDefault();\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <UserContext.Consumer>\r\n    {\r\n      ({user}) => {\r\n        setVoter(user);\r\n        return renderActiveComponent();\r\n      }\r\n    }\r\n    </UserContext.Consumer>\r\n  );\r\n}\r\n\r\nexport default Vote;\r\n","import React, { Component } from \"react\";\r\nimport UserContext from '../utils/UserContext';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport \"./assets/css/style.css\";\r\nimport mapboxgl from 'mapbox-gl';\r\nimport Button from 'react-bootstrap/Button';\r\nimport EditDistrict from \"./EditDistrict\";\r\nimport ViewCandidates from './ViewCandidates';\r\nimport Vote from './Vote';\r\n\r\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_API_TOKEN;\r\n\r\n// const ottawaLat = 45.416667;\r\n// const ottawaLong = -75.7;\r\n\r\nclass Landing extends Component {\r\n  state = {\r\n    activeComponentId: 0,\r\n    map: null\r\n  };\r\n\r\n  district = \"\"; // If the district changes, the map needs a new layer added and then the map needs to be refreshed. \r\n\r\n  componentDidMount() {\r\n    if(this.state.activeComponentId === 0) {\r\n      const voter = this.context.user;\r\n      const log = this.context.log;\r\n      const voterLatitude = voter.location.coordinates.latitude;\r\n      const voterLongitude = voter.location.coordinates.longitude;\r\n      log.debug(\"Landing componentDidMount voter location is \", voter.location);\r\n\r\n      const newMap = new mapboxgl.Map({\r\n        container: this.mapContainer,\r\n        style: 'mapbox://styles/mapbox/streets-v11',\r\n        center: [voterLongitude, voterLatitude],\r\n        zoom: 12\r\n      });\r\n\r\n      let districtLayerId = voter.location.district.replace(/\\s/g, \"\");\r\n\r\n      // Originally I had taken out the 'add layer on load' because it worked\r\n      // without that event listener on my local production environment.\r\n      //\r\n      // On Heroku the entire map was blue. Not even the standard mapbox tiles were loaded.\r\n      // \r\n      // I tried changing the code in the udpateMap to listen to both load and data\r\n      // ('load data' instead of 'data'). The docs said that this would work but it didn't.\r\n      // \r\n      // Putting the explicit \"listen to load event\" back into componentDidMount \r\n      // while leaving the 'data' event listener for the subsequent style updates did \r\n      // the trick. It now works both on Heroku and in my local production environment. \r\n      //\r\n      newMap.on('load', () => {\r\n        if(newMap.getLayer(districtLayerId) === undefined) {\r\n          newMap.addLayer({\r\n            'id': districtLayerId,\r\n            'type': 'fill',\r\n            'source': {\r\n              'type': 'geojson',\r\n              'data': {\r\n                'type': 'Feature',\r\n                'geometry': voter.location.districtBoundaries\r\n              }\r\n            },\r\n            'layout': {},\r\n            'paint': {\r\n              'fill-color': '#D3D3D3',\r\n              'fill-opacity': 0.8\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      this.district = voter.location.district;\r\n\r\n      // Unfortunately the DOM must be rendered before we can create the map \r\n      // (and set the state) because it's a mapbox requirement that the DOM container \r\n      // must exist and be passed in to create the map.\r\n      this.setState({ map: newMap }); // districtUpdated can be safely set to false because by this time the new district has been added as a layer to the map\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.updateMap();\r\n  }\r\n\r\n  updateMap() {\r\n    // If the voter's new address is in a different voting district, add the new voting district shaded area\r\n    // to the map and centre on it.\r\n    const voter = this.context.user;\r\n    if((this.state.map !== null) && (this.state.map.isSourceLoaded)) {\r\n      const voterLatitude = voter.location.coordinates.latitude;\r\n      const voterLongitude = voter.location.coordinates.longitude;\r\n\r\n      this.state.map.setCenter([voterLongitude, voterLatitude]);\r\n      this.context.log.debug(\"Landing componentDidUpdate map is \", this.state.map);\r\n\r\n      if(this.districtChanged(voter.location.district)) {\r\n        let districtLayerId = voter.location.district.replace(/\\s/g, \"\");\r\n        // When constructing a mapbox map, the first time that you create a style\r\n        // and a layer, you may listen to the 'load' event and add the layer during that\r\n        // event. This ensures that the style has finished loading before you change\r\n        // it by adding a new layer.\r\n        // \r\n        // When adding layers dynamically to a mapbox style, listen to the 'data' event\r\n        // and add the new layers during that event because the load event is only \r\n        // fired once during the map lifespan. \r\n        this.state.map.on('data', () => {\r\n          if(this.state.map.getLayer(districtLayerId) === undefined) {\r\n            this.state.map.addLayer({\r\n              'id': districtLayerId,\r\n              'type': 'fill',\r\n              'source': {\r\n                'type': 'geojson',\r\n                'data': {\r\n                  'type': 'Feature',\r\n                  'geometry': voter.location.districtBoundaries\r\n                }\r\n              },\r\n              'layout': {},\r\n              'paint': {\r\n                'fill-color': '#D3D3D3',\r\n                'fill-opacity': 0.8\r\n              }\r\n            });\r\n          };\r\n\r\n          this.district = voter.location.district;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  districtChanged(newDistrict) {\r\n    return this.district !== newDistrict;\r\n  }\r\n  \r\n  renderDefault = () => {\r\n    let voter = this.context.user;\r\n    return (\r\n      <div className=\"container-fluid full-screen\">\r\n        <div className=\"row\">\r\n            <div className=\"col-8 col-sm-9 mt-3 ml-3 bg-white text-center pt-2 mapFormWidget\">\r\n                Your district is {voter.location.district}\r\n            </div>\r\n            <div className=\"col-3 col-sm-2 mt-3\">\r\n              <Button variant=\"secondary w-100\" \r\n                      onClick={ () => { this.setState({ activeComponentId: 2 })}} >\r\n                  Edit</Button>\r\n            </div>\r\n        </div>\r\n        <div className=\"row\">\r\n           <div ref={el => this.mapContainer = el} className=\"col mapContainer\" />\r\n        </div>\r\n        <div className=\"row pb-3\">\r\n            <div className=\"col\">\r\n                <Button variant=\"secondary w-100\" \r\n                    onClick={ () => { this.setState({ activeComponentId: 3 })}} >\r\n                    View Candidates</Button>\r\n            </div>\r\n            <div className=\"col\">\r\n                <Button variant=\"secondary w-100\"\r\n                    onClick={ () => { \r\n                      this.setState({ activeComponentId: 4 })}} disabled={voter.hasvoted==='true'}>\r\n                    Vote</Button>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }  \r\n\r\n  // // active component 1\r\n  // renderLoading = () => {\r\n  //   return <LoadingSpinner />;\r\n  // };\r\n\r\n  // active component 2\r\n  renderEditDistrict = () => {\r\n    const voter = this.context.user;\r\n    return <EditDistrict location={voter.location} />;\r\n  };\r\n\r\n  \r\n  // active component 3\r\n  renderViewCandidates = () => {\r\n    return <ViewCandidates log={this.context.log}/>;\r\n  }\r\n\r\n\r\n  // active component 4\r\n  renderVote = () => {\r\n    return <Vote log={this.context.log}/>;\r\n  }\r\n\r\n  renderActiveComponent = () => {\r\n    switch(this.state.activeComponentId) {\r\n      case(4): {\r\n        return this.renderVote();\r\n      }\r\n\r\n      case(3): {\r\n          return this.renderViewCandidates();\r\n      }\r\n\r\n      case(2): {\r\n        return this.renderEditDistrict();\r\n      }\r\n\r\n      // case(1): {\r\n      //     return this.renderLoading();\r\n      // }\r\n\r\n      case(0):\r\n      default: {\r\n          return this.renderDefault();\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return this.renderActiveComponent();\r\n  }\r\n};\r\nLanding.contextType = UserContext;\r\n\r\nexport default Landing;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class Tooltip extends React.Component {\r\n  \r\n  static propTypes = {\r\n    features: PropTypes.array.isRequired\r\n  };\r\n\r\n  render() {\r\n    const { features } = this.props;\r\n\r\n    if(features.length === 0) {\r\n      // Nothing to render for now. This happens when the mouse is over, for example, \r\n      // America instead of Canada.\r\n      return (<div></div>);\r\n    }\r\n\r\n    let feature = features[0]; // There is only one voting feature per district.\r\n    return (\r\n      <div>\r\n        <div className=\"bg-white\">\r\n          <div key={feature.layer.metadata.votingDistrict}>\r\n            <strong>{feature.layer.metadata.votingDistrict}</strong>\r\n            <div>{feature.layer.metadata.votingSeat}</div>\r\n          </div>\r\n        </div>\r\n        <span className=\"flex-child color-white triangle triangle--d\"></span>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport UserContext from '../utils/UserContext';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport Button from 'react-bootstrap/Button';\r\nimport axios from \"axios\";\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport \"./assets/css/style.css\";\r\n\r\nimport ReactDOM from 'react-dom';\r\nimport Tooltip from './tooltip';\r\n\r\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_API_TOKEN;\r\n\r\nconst ottawaLat = 45.416667;\r\nconst ottawaLong = -75.7;\r\nconst winnipegLat = 49.900501;\r\nconst winnipegLong = -97.139313;\r\n\r\n// To get the parties' colour as a hex value, we took a screen capture of their \r\n// web site, imported it into GIMP, used the eyedropper and recorded the hex.\r\nconst pcParty = '#244982';\r\nconst greenParty = '#4e9a2f';\r\nconst blocQuebecois = '#143d73';\r\nconst liberalParty = '#cd2003';\r\nconst ndp = '#ec8200';\r\nconst neonPink = \"#FF6EC7\"; // Independent\r\nconst neonYellow = \"#CCFF00\"; // Less known party. See https://www.elections.ca/content.aspx?section=pol&dir=par&document=index&lang=e\r\nconst grey = '#D3D3D3'; // 'Before vote' (reset) colour\r\n\r\nclass Simulation extends Component {\r\n  // If something is loading in the background, such as district boundaries or the simulation is running, \r\n  // isLoading=true means show the loading spinner and disable the buttons.\r\n  state = {\r\n    map: null,\r\n    isLoading: true\r\n  };\r\n\r\n  tooltipContainer;\r\n  tooltipReference; // keep track of the old tooltip and destroy it before allocating another one. \r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  setTooltip(features) {\r\n    // Release the memory used by the last tooltip because we use only one tooltip at a time.\r\n    ReactDOM.unmountComponentAtNode(document.getElementById('mapbox-tooltip'));\r\n\r\n    // Then allocate the new tooltip\r\n    this.tooltipReference = ReactDOM.render(\r\n      <Tooltip features={features}/>,\r\n      this.tooltipContainer\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    // On load show a blank map. \r\n    try {\r\n      const newMap = new mapboxgl.Map({\r\n        container: this.mapContainer,\r\n        style: 'mapbox://styles/mapbox/dark-v10',\r\n        center: [ottawaLong, ottawaLat],\r\n        zoom: 4\r\n      });\r\n\r\n      // Container to put React generated content in.\r\n      this.tooltipContainer = document.createElement('div');\r\n      this.tooltipContainer.setAttribute('id', 'mapbox-tooltip');\r\n      const tooltip = new mapboxgl.Marker(\r\n        this.tooltipContainer, {\r\n        offset: [-25, 0]\r\n      });\r\n      tooltip.setLngLat([0,0]);\r\n      tooltip.addTo(newMap);\r\n      \r\n      \r\n      // Load the data to populate the map with districts\r\n      axios({\r\n        method: 'get',\r\n        url: `/api/v1/districts`\r\n      })\r\n      .then( response => {\r\n        let districts = response.data;\r\n\r\n        for(let i=0; i<districts.length; i++) {\r\n          const district = districts[i];\r\n          this.addLayer(district, newMap);\r\n        }\r\n\r\n        newMap.on('mousemove', (e) => {\r\n          const features = newMap.queryRenderedFeatures(e.point);\r\n          tooltip.setLngLat(e.lngLat);\r\n\r\n          // We want to render a tooltip only for the voting district layer information.\r\n          let votingFeature = features.filter((feature) => {\r\n            if(feature.layer.metadata == null) return false;\r\n            return (feature.layer.metadata.votingDistrict !== undefined);\r\n          });\r\n\r\n          newMap.getCanvas().style.cursor = (votingFeature.length > 0) ? 'pointer' : '';\r\n      \r\n          // Don't check if the votingFeature isn't found (e.g. when the mouse isn't over Canada).\r\n          // Instead, tell the tooltip to render an empty div.\r\n          this.setTooltip(votingFeature);      \r\n        });\r\n  \r\n        // Create a data change to trigger the layer render.\r\n        newMap.setCenter([winnipegLong, winnipegLat]);\r\n        this.setState({isLoading: false});\r\n      })\r\n      .catch ( error => {\r\n        this.props.log.error(\"Simulation componentDidMount. Error while retrieving districts for simulation\");\r\n        this.props.log.error(error);\r\n        this.setState({isLoading: false});\r\n      });\r\n\r\n      // load the districts with an axios call and save them to state\r\n      this.setState({ map: newMap });  \r\n    } catch ( error ) {\r\n      this.props.log.error(\"Error while creating blank map for simulation\");\r\n      this.props.log.error(error);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Remove every created DOM node. and destroy the map. Destroying the map\r\n    // will remove the event listeners on the map.\r\n    try {\r\n      this.tooltipContainer.remove();\r\n      this.state.map.destroy();\r\n    } catch ( error ) {\r\n      this.props.log.error(\"Error while freeing resources in componentWillUnmount\");\r\n      this.props.log.error(error);\r\n    }\r\n  }\r\n\r\n  getPartyColour(partyName) {\r\n    switch(partyName) {\r\n      case('Independent'): {\r\n        return neonPink;\r\n      }\r\n\r\n      case('Conservative Party of Canada'): {\r\n        return pcParty;\r\n      }\r\n\r\n      case('Green Party of Canada'): {\r\n        return greenParty;\r\n      }\r\n\r\n      case('Liberal Party of Canada'): {\r\n        return liberalParty;\r\n      }\r\n\r\n      case('New Democratic Party'): {\r\n        return ndp;\r\n      }\r\n\r\n      case('Bloc Québécois'):\r\n      case('Bloc Qu�b�cois'): {\r\n        return blocQuebecois;\r\n      }\r\n        \r\n      default: {\r\n        // One of the other parties documented on https://www.elections.ca/content.aspx?section=pol&dir=par&document=index&lang=e\r\n        // For example the 'Animal Protection Party of Canada' or -- not kidding -- the 'Pirate Party of Canada'. \r\n        this.props.log.trace(\"Seat won by \", partyName);\r\n        return neonYellow;\r\n      }\r\n    }\r\n  }\r\n\r\n  getDistrictLayerId(district) {\r\n    return district.district_name.replace(/\\s/g, \"\");\r\n  }\r\n\r\n  addLayer(district, map) {\r\n    // Load this on data change, not on map load, because the map is loaded\r\n    // before this method is called so that the user sees something instead\r\n    // of a blank screen while the districts are loaded.\r\n    map.on('data', () => {\r\n      let districtLayerId = this.getDistrictLayerId(district);\r\n      let votingSeat = (district.seat === null) ? 'Awaiting vote' : district.seat;\r\n      let fillColor = (district.seat === null) ? grey : this.getPartyColour(district.seat);\r\n      if(map.getLayer(districtLayerId) === undefined) {\r\n        map.addLayer({\r\n          'id': districtLayerId,\r\n          'type': 'fill',\r\n          'source': {\r\n            'type': 'geojson',\r\n            'data': {\r\n              'type': 'Feature',\r\n              'geometry': district.location.districtBoundaries\r\n            }\r\n          },\r\n          'metadata': {\r\n            votingDistrict: district.district_name,\r\n            votingSeat: votingSeat\r\n          },\r\n          'layout': {},\r\n          'paint': {\r\n            'fill-color': fillColor,\r\n            'fill-opacity': 0.8\r\n          }\r\n        });\r\n      };\r\n    });\r\n  }\r\n\r\n  // Run the simulation and then get the 'winning' party to determine which colour to use on the map.\r\n  renderSimulation = () => {\r\n    this.setState({isLoading: true});\r\n    axios({\r\n      method: 'put',\r\n      url: `/api/v1/simulation/run`\r\n    })\r\n    .then( response => {\r\n      let districts = response.data;\r\n      for(let i=0; i<districts.length; i++) {\r\n        let district = districts[i];\r\n        let districtLayerId = this.getDistrictLayerId(district);\r\n        let partyColour = this.getPartyColour(district.seat);\r\n        if(this.state.map.getLayer(districtLayerId) !== undefined) {\r\n          this.state.map.getLayer(districtLayerId).metadata.votingSeat = district.seat;\r\n          this.state.map.setPaintProperty(districtLayerId, 'fill-color', partyColour);\r\n        }\r\n      }\r\n      this.setState({isLoading: false});\r\n    })\r\n    .catch( error => {\r\n      this.props.log.error(\"Error while running simulation\");\r\n      this.props.log.error(error);\r\n      this.setState({isLoading: false});\r\n    });\r\n  };\r\n  \r\n  // \"Undo\" the simulation. Reset all votes to null and recolour the districts on the map.\r\n  resetSimulation = () => {\r\n    this.setState({isLoading: true});\r\n    axios({\r\n      method: 'put',\r\n      url: `/api/v1/simulation/reset`\r\n    })\r\n    .then( response => {\r\n      let districts = response.data;\r\n      for(let i=0; i<districts.length; i++) {\r\n        let district = districts[i];\r\n        let districtLayerId = this.getDistrictLayerId(district);\r\n        if(this.state.map.getLayer(districtLayerId) !== undefined) {\r\n          this.state.map.getLayer(districtLayerId).metadata.votingSeat = 'Awaiting vote';\r\n          this.state.map.setPaintProperty(districtLayerId, 'fill-color', grey);\r\n        }\r\n      }\r\n      this.setState({isLoading: false});\r\n  })\r\n    .catch( error => {\r\n      this.props.log.error(\"Error while resetting simulation\");\r\n      this.props.log.error(error);\r\n      this.setState({isLoading: false});\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const loadingClass = (this.state.isLoading) ? ' bold ' : ' hide';\r\n    return (\r\n      <div className=\"container-fluid full-screen\">\r\n        <div className=\"row\">\r\n           <div ref={el => this.mapContainer = el} className=\"col mapContainer\" />\r\n        </div>\r\n        <div className={'row d-flex justify-content-center' + loadingClass}>\r\n           <i className='fa fa-spinner fa-spin' />\r\n           <span className='w-80 pl-2 text-center'>Loading...</span>\r\n        </div>\r\n        <div className=\"row pb-3\">\r\n            <div className=\"col\">\r\n                <Button variant=\"secondary w-100\" \r\n                    onClick={ () => { this.resetSimulation(); }} disabled={this.state.isLoading}>\r\n                    Reset Vote</Button>\r\n            </div>\r\n            <div className=\"col\">\r\n                <Button variant=\"secondary w-100\"\r\n                    onClick={ () => { this.renderSimulation()} } disabled={this.state.isLoading}>\r\n                    Simulate Vote</Button>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\nSimulation.contextType = UserContext;\r\n\r\nexport default Simulation;\r\n","import React, { useState } from 'react';\r\nimport Login from \"./components/Login\";\r\nimport Landing from \"./components/Landing\";\r\nimport UserContext from './utils/UserContext';\r\nimport log from 'loglevel';\r\nimport remote from 'loglevel-plugin-remote';\r\nimport Simulation from './components/Simulation';\r\n\r\n// When debugging the React code, set the user data as though they logged in via Login.\r\n// When not debugging, comment out the below import.\r\n//import hannahWhite from './debugReact'; \r\n\r\nconst level = (process.env.REACT_APP_LOGGING_LEVEL) ? process.env.REACT_APP_LOGGING_LEVEL : 'info';\r\nlog.setLevel(level);\r\nlog.trace(\"App mapbox access token is \", process.env.REACT_APP_MAPBOX_API_TOKEN);\r\nconst customJSON = log => ({\r\n  msg: log.message,\r\n  level: level,\r\n  stacktrace: log.stacktrace\r\n});\r\n\r\nremote.apply(log, { format: customJSON, url: '/internal/v1/logger' });\r\n\r\nfunction App() {\r\n  const [user, setUser] = useState( null );\r\n  // FOR DEBUGGING REACT. Comment out and replace with the line above when in production.\r\n  //const [user, setUser] = useState(hannahWhite); \r\n  // END DEBUGGING REACT\r\n\r\n  // This React application was designed to have only three roots:\r\n  //   1. Login \r\n  //   2. Landing (after user has logged in)\r\n  //   3. Simulation (after admin has logged in)\r\n  //\r\n  // You cannot reach any of the components via a Router. This was done\r\n  // so that we do not need to check, in every component, if the user has logged\r\n  // in or not. The URL cannot reach any components except Login, Landing, or Simulation. \r\n  let component = null;\r\n  if(user === null) {\r\n    component = <Login log={log}/>\r\n  } else if(user.isAdmin === true) {\r\n    component = <Simulation log={log} />\r\n  } else {\r\n    component = <Landing />\r\n  }\r\n\r\n  return (\r\n    <UserContext.Provider value={ {\r\n      user: user,\r\n      handleLogin: (newUser) => {\r\n        if((newUser === null)) {\r\n          // If null, either the username or the password didn't match. No one is logged in yet.\r\n          return;\r\n        }\r\n\r\n        if(!newUser.isAdmin) {\r\n          // If the user is an administrator, they don't have an address etc. They just need to run the simulation.\r\n          const userSubset = {\r\n            name: newUser.name,\r\n            district: newUser.location.district,\r\n            street: newUser.location.street,\r\n            city: newUser.location.city,\r\n            postcode: newUser.location.postcode,\r\n            username: newUser.login.username\r\n          }\r\n          log.info(\"App Context \", JSON.stringify(userSubset)); \r\n        }\r\n        setUser(newUser)\r\n      },\r\n      log: log\r\n    } }>\r\n      { component }\r\n    </UserContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"font-awesome/css/font-awesome.min.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}